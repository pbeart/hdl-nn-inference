import pickle
import mlgen
import fp as fp
import argparse, os
import warnings

from dataclasses import dataclass

parser = argparse.ArgumentParser(description="Simulate the given mlgen model")
parser.add_argument("model", help="the input .mlgen array")
parser.add_argument("--incremental-log-layers", "-inc", action="store_true")
parser.add_argument("--simulate-intervals", "-int", action="store_true")
parser.add_argument("--artificial-interval", "-aint", type=float, default=0.0, help="Introduce artificial interval to network inputs of +/- this number")
#parser.add_argument("input", help="comma-separated list of inputs")


float_environment = fp.FloatEnvironment("binary16")

args = parser.parse_args()

f = open(args.model, "rb")
mlgen_model: mlgen.Model = pickle.load(f)
f.close()

#last_layer = [float(x) for x in args.input.split(",")]


num_logweight_steps = 1

def abbreviate_list(l):
    # pretty ugly
    def listify(m):
        return ", ".join(f'{float(x):.2f}' if isinstance(x,(int,float)) else str(x) for x in m)
    
    trim_to_length = 15
    if len(l) <= trim_to_length:
        return "[" + listify(l) + "]"
    else:
        each_part_length = trim_to_length//2 # e.g. 15 => two 7 length ends and a middle
        first_part = "[" + listify(l[:each_part_length])
        second_part = listify(l[-each_part_length:]) + "]"
        return first_part + " ... " + second_part + f" ({len(l)} elements)"


while True:
    last_layer
    last_interval = [(x - args.artificial_interval, x + args.artificial_interval) for x in last_layer]

    if args.incremental_log_layers:
        print(f"Simulating with {num_logweight_steps} log-weight steps")
    reached_max_steps = False
    
    for layer_index, layer in enumerate(mlgen_model.layers):
        if isinstance(layer, mlgen.IncrementalLogLayer):
            if args.incremental_log_layers:
                reached_max_steps = reached_max_steps or layer.set_steps(num_logweight_steps)
            else:
                warnings.warn("Encountered incremental log layer but not advancing (use --incremental-log-layers)!")
        last_layer = layer.eval(last_layer)
        print(f"- Layer #{layer_index} ({layer}) got {abbreviate_list(last_layer)}")

        if args.simulate_intervals:
            last_interval = layer.eval_interval(last_interval)
            print(f"  - got intervals {abbreviate_list(last_interval)}")
    
    print(f"Output: {last_layer}")
    if args.simulate_intervals:
        print(f"Output intervals: {last_interval}")
    
    if not args.incremental_log_layers:
        break
    if reached_max_steps:
        print(f"Reached max steps at {num_logweight_steps} steps")
        break

    num_logweight_steps += 1
